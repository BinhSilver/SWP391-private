package controller.Authentication;

// ===== IMPORT STATEMENTS =====
import jakarta.servlet.ServletException;    // Servlet Exception
import jakarta.servlet.annotation.MultipartConfig;  // Annotation cho file upload
import jakarta.servlet.annotation.WebServlet;       // WebServlet annotation
import jakarta.servlet.http.HttpServlet;           // Base HTTP Servlet
import jakarta.servlet.http.HttpServletRequest;    // HTTP Request
import jakarta.servlet.http.HttpServletResponse;   // HTTP Response
import jakarta.servlet.http.HttpSession;           // Session handling
import jakarta.servlet.http.Part;          // File upload part
import model.User;                          // User model
import Dao.UserDAO;                         // Data Access Object cho Users
import config.S3Util;                      // AWS S3 utility
import java.io.IOException;                 // IO Exception
import java.sql.SQLException;               // SQL Exception

// ===== SERVLET CONFIGURATION =====
/**
 * UploadCertificateServlet - Servlet x·ª≠ l√Ω upload ch·ª©ng ch·ªâ cho gi√°o vi√™n
 * 
 * Ch·ª©c nƒÉng ch√≠nh:
 * - Hi·ªÉn th·ªã trang upload ch·ª©ng ch·ªâ
 * - X·ª≠ l√Ω upload file ch·ª©ng ch·ªâ (PDF)
 * - Validate file (k√≠ch th∆∞·ªõc, ƒë·ªãnh d·∫°ng, content type)
 * - Upload l√™n S3 ho·∫∑c l∆∞u local
 * - C·∫≠p nh·∫≠t tr·∫°ng th√°i user th√†nh teacher pending
 * 
 * URL mapping: /upload-certificate
 * Max file size: 10MB
 */
@WebServlet("/upload-certificate")
@MultipartConfig(maxFileSize = 10 * 1024 * 1024) // 10MB max
public class UploadCertificateServlet extends HttpServlet {

    // ===== GET METHOD - DISPLAY UPLOAD PAGE =====
    /**
     * X·ª≠ l√Ω GET request ƒë·ªÉ hi·ªÉn th·ªã trang upload ch·ª©ng ch·ªâ
     * Quy tr√¨nh:
     * 1. Ki·ªÉm tra user ƒë√£ ƒëƒÉng nh·∫≠p ch∆∞a
     * 2. Hi·ªÉn th·ªã trang upload ch·ª©ng ch·ªâ
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        // ===== SESSION VALIDATION =====
        // L·∫•y th√¥ng tin user t·ª´ session
        HttpSession session = request.getSession();
        User authUser = (User) session.getAttribute("authUser");
        
        // ===== LOGIN CHECK =====
        // Ki·ªÉm tra xem user ƒë√£ ƒëƒÉng nh·∫≠p ch∆∞a
        if (authUser == null) {
            response.sendRedirect(request.getContextPath() + "/login");
            return;
        }
        
        // ===== FORWARD TO UPLOAD PAGE =====
        // Hi·ªÉn th·ªã trang upload ch·ª©ng ch·ªâ
        request.getRequestDispatcher("/upload-certificate.jsp").forward(request, response);
    }

    // ===== POST METHOD - HANDLE CERTIFICATE UPLOAD =====
    /**
     * X·ª≠ l√Ω POST request ƒë·ªÉ upload ch·ª©ng ch·ªâ
     * Quy tr√¨nh:
     * 1. Ki·ªÉm tra user ƒë√£ ƒëƒÉng nh·∫≠p ch∆∞a
     * 2. Validate file upload
     * 3. Upload file l√™n S3 ho·∫∑c l∆∞u local
     * 4. C·∫≠p nh·∫≠t tr·∫°ng th√°i user
     * 5. Hi·ªÉn th·ªã k·∫øt qu·∫£
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        // ===== SESSION VALIDATION =====
        // L·∫•y th√¥ng tin user t·ª´ session
        HttpSession session = request.getSession();
        User authUser = (User) session.getAttribute("authUser");
        
        // ===== LOGIN CHECK =====
        // Ki·ªÉm tra xem user ƒë√£ ƒëƒÉng nh·∫≠p ch∆∞a
        if (authUser == null) {
            response.sendRedirect(request.getContextPath() + "/login");
            return;
        }
        
        try {
            // ===== GET UPLOADED FILE =====
            // L·∫•y file ch·ª©ng ch·ªâ t·ª´ request
            Part certificatePart = request.getPart("certificate");
            
            // ===== FILE EXISTENCE CHECK =====
            // Ki·ªÉm tra file c√≥ ƒë∆∞·ª£c upload kh√¥ng
            if (certificatePart == null || certificatePart.getSize() == 0) {
                request.setAttribute("error", "‚ùå Vui l√≤ng ch·ªçn file ch·ª©ng ch·ªâ ƒë·ªÉ upload!");
                request.getRequestDispatcher("/upload-certificate.jsp").forward(request, response);
                return;
            }
            
            // ===== FILE SIZE VALIDATION =====
            // Ki·ªÉm tra k√≠ch th∆∞·ªõc file (10MB = 10 * 1024 * 1024 bytes)
            long fileSize = certificatePart.getSize();
            long maxSize = 10 * 1024 * 1024; // 10MB
            if (fileSize > maxSize) {
                request.setAttribute("error", "‚ùå File qu√° l·ªõn! K√≠ch th∆∞·ªõc t·ªëi ƒëa l√† 10MB. File hi·ªán t·∫°i: " + 
                    String.format("%.2f", fileSize / (1024.0 * 1024.0)) + "MB");
                request.getRequestDispatcher("/upload-certificate.jsp").forward(request, response);
                return;
            }
            
            // ===== FILE NAME VALIDATION =====
            // Ki·ªÉm tra t√™n file
            String fileName = certificatePart.getSubmittedFileName();
            if (fileName == null || fileName.trim().isEmpty()) {
                request.setAttribute("error", "‚ùå T√™n file kh√¥ng h·ª£p l·ªá!");
                request.getRequestDispatcher("/upload-certificate.jsp").forward(request, response);
                return;
            }
            
            // ===== FILE TYPE VALIDATION =====
            // Ki·ªÉm tra ƒë·ªãnh d·∫°ng file (ch·ªâ ch·∫•p nh·∫≠n PDF)
            if (!fileName.toLowerCase().endsWith(".pdf")) {
                request.setAttribute("error", "‚ùå Ch·ªâ ch·∫•p nh·∫≠n file PDF! File hi·ªán t·∫°i: " + fileName);
                request.getRequestDispatcher("/upload-certificate.jsp").forward(request, response);
                return;
            }
            
            // ===== CONTENT TYPE VALIDATION =====
            // Ki·ªÉm tra content type
            String contentType = certificatePart.getContentType();
            if (contentType == null || !contentType.equals("application/pdf")) {
                request.setAttribute("error", "‚ùå File kh√¥ng ph·∫£i ƒë·ªãnh d·∫°ng PDF h·ª£p l·ªá!");
                request.getRequestDispatcher("/upload-certificate.jsp").forward(request, response);
                return;
            }
            
            // ===== S3 UPLOAD =====
            // Upload file l√™n S3
            String certificatePath = null;
            try {
                // ===== PREPARE S3 UPLOAD =====
                // Chu·∫©n b·ªã th√¥ng tin cho upload S3
                java.io.InputStream is = certificatePart.getInputStream();
                long size = certificatePart.getSize();
                String key = "certificates/" + authUser.getUserID() + "_" + System.currentTimeMillis() + ".pdf";
                
                // ===== EXECUTE S3 UPLOAD =====
                // Th·ª±c hi·ªán upload l√™n S3
                String s3Url = S3Util.uploadFile(is, size, key, contentType);
                certificatePath = key;
                System.out.println("‚úÖ [UploadCertificate] Upload ch·ª©ng ch·ªâ th√†nh c√¥ng: " + s3Url);
                System.out.println("üìÅ [UploadCertificate] Certificate path saved: " + certificatePath);
                
            } catch (Exception e) {
                // ===== S3 UPLOAD FALLBACK =====
                // N·∫øu upload S3 th·∫•t b·∫°i, l∆∞u local
                System.err.println("‚ùå [UploadCertificate] L·ªói upload S3: " + e.getMessage());
                e.printStackTrace();
                
                // ===== LOCAL UPLOAD =====
                // Fallback: l∆∞u local
                try {
                    // ===== PREPARE LOCAL UPLOAD =====
                    // Chu·∫©n b·ªã th∆∞ m·ª•c upload local
                    String uploadPath = getServletContext().getRealPath("/certificates/");
                    java.io.File uploadDir = new java.io.File(uploadPath);
                    if (!uploadDir.exists()) uploadDir.mkdirs();
                    
                    // ===== EXECUTE LOCAL UPLOAD =====
                    // Th·ª±c hi·ªán upload local
                    String localFileName = authUser.getUserID() + "_" + System.currentTimeMillis() + ".pdf";
                    String filePath = uploadPath + java.io.File.separator + localFileName;
                    certificatePart.write(filePath);
                    certificatePath = "certificates/" + localFileName;
                    System.out.println("‚úÖ [UploadCertificate] Upload local th√†nh c√¥ng: " + filePath);
                } catch (Exception localError) {
                    // ===== LOCAL UPLOAD ERROR =====
                    // X·ª≠ l√Ω l·ªói upload local
                    System.err.println("‚ùå [UploadCertificate] L·ªói upload local: " + localError.getMessage());
                    request.setAttribute("error", "‚ùå Kh√¥ng th·ªÉ upload file! Vui l√≤ng th·ª≠ l·∫°i sau.");
                    request.getRequestDispatcher("/upload-certificate.jsp").forward(request, response);
                    return;
                }
            }
            
            // ===== UPDATE USER STATUS =====
            // C·∫≠p nh·∫≠t user th√†nh teacher pending (v·∫´n l√† h·ªçc sinh, ch·ªù x√°c nh·∫≠n)
            UserDAO userDAO = new UserDAO();
            authUser.setRoleID(1); // V·∫´n l√† h·ªçc sinh, ch·ªù admin x√°c nh·∫≠n
            authUser.setTeacherPending(true);
            authUser.setCertificatePath(certificatePath);
            
            try {
                // ===== DATABASE UPDATE =====
                // C·∫≠p nh·∫≠t th√¥ng tin user trong database
                userDAO.updateUser(authUser);
                System.out.println("‚úÖ [UploadCertificate] C·∫≠p nh·∫≠t user th√†nh c√¥ng: UserID=" + authUser.getUserID() + ", TeacherPending=true");
                
                // ===== SESSION UPDATE =====
                // C·∫≠p nh·∫≠t session v·ªõi th√¥ng tin m·ªõi
                session.setAttribute("authUser", authUser);
                
                // ===== SUCCESS RESPONSE =====
                // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
                request.setAttribute("success", "‚úÖ ƒê√£ g·ª≠i ch·ª©ng ch·ªâ th√†nh c√¥ng! Admin s·∫Ω ki·ªÉm tra v√† ph√™ duy·ªát trong th·ªùi gian s·ªõm nh·∫•t.");
                request.getRequestDispatcher("/upload-certificate.jsp").forward(request, response);
                
            } catch (SQLException e) {
                // ===== DATABASE ERROR =====
                // X·ª≠ l√Ω l·ªói database
                System.err.println("‚ùå [UploadCertificate] L·ªói c·∫≠p nh·∫≠t database: " + e.getMessage());
                e.printStackTrace();
                request.setAttribute("error", "‚ùå C√≥ l·ªói x·∫£y ra khi l∆∞u th√¥ng tin! Vui l√≤ng th·ª≠ l·∫°i sau.");
                request.getRequestDispatcher("/upload-certificate.jsp").forward(request, response);
            }
            
        } catch (Exception e) {
            // ===== GENERAL ERROR HANDLING =====
            // X·ª≠ l√Ω l·ªói chung
            e.printStackTrace();
            request.setAttribute("error", "‚ùå C√≥ l·ªói x·∫£y ra khi upload ch·ª©ng ch·ªâ: " + e.getMessage());
            request.getRequestDispatcher("/upload-certificate.jsp").forward(request, response);
        }
    }
} 