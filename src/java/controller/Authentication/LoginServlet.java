package controller.Authentication;

// ===== IMPORT STATEMENTS =====
import controller.Email.EmailUtil;           // Utility cho email
import Dao.CoursesDAO;                      // Data Access Object cho Courses
import Dao.UserDAO;                         // Data Access Object cho Users
import jakarta.mail.MessagingException;     // Exception cho email
import java.io.IOException;                 // IO Exception
import java.sql.SQLException;               // SQL Exception
import java.util.List;                      // List collection
import jakarta.servlet.ServletException;    // Servlet Exception
import jakarta.servlet.annotation.MultipartConfig;  // Annotation cho file upload
import jakarta.servlet.annotation.WebServlet;       // WebServlet annotation
import jakarta.servlet.http.Cookie;                // Cookie handling
import jakarta.servlet.http.HttpServlet;           // Base HTTP Servlet
import jakarta.servlet.http.HttpServletRequest;    // HTTP Request
import jakarta.servlet.http.HttpServletResponse;   // HTTP Response
import jakarta.servlet.http.HttpSession;           // Session handling
import model.Course;                        // Course model
import model.User;                          // User model
import service.PasswordService;             // Password hashing service
import jakarta.servlet.http.Part;          // File upload part
import config.S3Util;                      // AWS S3 utility

// ===== SERVLET CONFIGURATION =====
@WebServlet(name = "LoginServlet", urlPatterns = {"/login"})  // Map ƒë·∫øn URL /login
@MultipartConfig  // Cho ph√©p file upload
public class LoginServlet extends HttpServlet {

    // ===== GET METHOD - DISPLAY LOGIN PAGE =====
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        // ===== COOKIE HANDLING - REMEMBER ME =====
        // ƒê·ªçc cookie ƒë·ªÉ t·ª± ƒë·ªông ƒëi·ªÅn email n·∫øu user ƒë√£ ch·ªçn "Remember Me"
        String rememberedEmail = getRememberedEmail(request);
        if (rememberedEmail != null && !rememberedEmail.trim().isEmpty()) {
            request.setAttribute("rememberedEmail", rememberedEmail);
            request.setAttribute("rememberMe", "on"); // T·ª± ƒë·ªông check checkbox
            System.out.println("üç™ [Cookie] ƒê√£ ƒë·ªçc email t·ª´ cookie: " + rememberedEmail);
        }
        
        // ===== LANGUAGE PREFERENCE COOKIE =====
        // ƒê·ªçc cookie cho language preference
        String language = getCookieValue(request, "language");
        if (language != null) {
            request.setAttribute("userLanguage", language);
            System.out.println("üåê [Cookie] Language preference: " + language);
        }
        
        // ===== THEME PREFERENCE COOKIE =====
        // ƒê·ªçc cookie cho theme preference
        String theme = getCookieValue(request, "theme");
        if (theme != null) {
            request.setAttribute("userTheme", theme);
            System.out.println("üé® [Cookie] Theme preference: " + theme);
        }
        
        // ===== GOOGLE OAUTH ERROR HANDLING =====
        // X·ª≠ l√Ω error t·ª´ Google OAuth
        String error = request.getParameter("error");
        if (error != null) {
            String errorMessage = "";
            switch (error) {
                case "google_oauth_error":
                    errorMessage = "C√≥ l·ªói x·∫£y ra khi ƒëƒÉng nh·∫≠p b·∫±ng Google. Vui l√≤ng th·ª≠ l·∫°i.";
                    break;
                case "no_code":
                    errorMessage = "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c m√£ x√°c th·ª±c t·ª´ Google. Vui l√≤ng th·ª≠ l·∫°i.";
                    break;
                case "create_user_failed":
                    errorMessage = "Kh√¥ng th·ªÉ t·∫°o t√†i kho·∫£n m·ªõi. Vui l√≤ng th·ª≠ l·∫°i.";
                    break;
                case "google_login_failed":
                    errorMessage = "ƒêƒÉng nh·∫≠p Google th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.";
                    break;
                case "token_exchange_failed":
                    errorMessage = "Kh√¥ng th·ªÉ x√°c th·ª±c v·ªõi Google. Vui l√≤ng th·ª≠ l·∫°i.";
                    break;
                default:
                    errorMessage = "C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.";
                    break;
            }
            request.setAttribute("message", errorMessage);
        }
        
        // ===== FORWARD TO LOGIN PAGE =====
        // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang login
        request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
    }

    // ===== POST METHOD - HANDLE FORM SUBMISSIONS =====
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        // ===== GET ACTION PARAMETER =====
        // L·∫•y action t·ª´ form ƒë·ªÉ x√°c ƒë·ªãnh h√†nh ƒë·ªông c·∫ßn th·ª±c hi·ªán
        String action = request.getParameter("action");

        // ===== SIGN IN HANDLING =====
        // X·ª≠ l√Ω ƒëƒÉng nh·∫≠p
        if ("signin".equals(action)) {
            handleSignIn(request, response);
            return;
        }

        // ===== SIGN UP HANDLING =====
        // X·ª≠ l√Ω ƒëƒÉng k√Ω
        if ("signup".equals(action)) {
            handleSignUp(request, response);
            return;
        }

        // ===== CHANGE PASSWORD HANDLING =====
        // X·ª≠ l√Ω ƒë·ªïi m·∫≠t kh·∫©u
        if ("change_pass".equals(action)) {
            doPut(request, response);
            return;
        }

        // ===== FORGOT PASSWORD HANDLING =====
        // X·ª≠ l√Ω qu√™n m·∫≠t kh·∫©u
        if ("forgot_pass".equals(action)) {
            handleForgotPassword(request, response);
            return;
        }
    }

    // ===== PUT METHOD - HANDLE AJAX REQUESTS =====
    /**
     * X·ª≠ l√Ω PUT request cho AJAX calls
     * Ch·ªß y·∫øu d√πng cho vi·ªác ki·ªÉm tra email t·ªìn t·∫°i
     */
    @Override
    protected void doPut(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // ===== EMAIL VALIDATION =====
        // Ki·ªÉm tra email c√≥ t·ªìn t·∫°i trong database kh√¥ng
        String email = request.getParameter("email");
        if (email != null && !email.trim().isEmpty()) {
            try {
                UserDAO userDAO = new UserDAO();
                User existingUser = userDAO.getUserByEmail(email);
                
                // Tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng JSON
                response.setContentType("application/json");
                response.setCharacterEncoding("UTF-8");
                
                if (existingUser != null) {
                    response.getWriter().write("{\"exists\": true}");
                } else {
                    response.getWriter().write("{\"exists\": false}");
                }
            } catch (Exception e) {
                response.getWriter().write("{\"error\": \"Database error\"}");
            }
        }
    }

    // ===== SIGN IN HANDLER =====
    /**
     * X·ª≠ l√Ω ƒëƒÉng nh·∫≠p user
     * Quy tr√¨nh:
     * 1. Validate input
     * 2. Ki·ªÉm tra user trong database
     * 3. Verify password
     * 4. Set session v√† cookies
     * 5. Redirect
     */
    private void handleSignIn(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        // ===== GET FORM PARAMETERS =====
        // L·∫•y th√¥ng tin t·ª´ form ƒëƒÉng nh·∫≠p
        String email = request.getParameter("email");
        String password = request.getParameter("password");
        String rememberMe = request.getParameter("rememberMe");
        
        // ===== INPUT VALIDATION =====
        // Ki·ªÉm tra input c√≥ h·ª£p l·ªá kh√¥ng
        if (email == null || email.trim().isEmpty() || password == null || password.trim().isEmpty()) {
            request.setAttribute("message", "‚ùå Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß email v√† m·∫≠t kh·∫©u!");
            request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
            return;
        }
        
        try {
            // ===== DATABASE OPERATIONS =====
            // T√¨m user trong database
            UserDAO userDAO = new UserDAO();
            User user = userDAO.getUserByEmail(email);
            
            // ===== USER NOT FOUND =====
            // Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng
            if (user == null) {
                request.setAttribute("message", "‚ùå Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng!");
                request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
                return;
            }
            
            // ===== GOOGLE USER VALIDATION =====
            // Ki·ªÉm tra n·∫øu user ƒë∆∞·ª£c t·∫°o b·∫±ng Google
            if (userDAO.isGoogleUser(email)) {
                request.setAttribute("message", "‚ùå T√†i kho·∫£n n√†y ƒë∆∞·ª£c t·∫°o b·∫±ng Google. Vui l√≤ng ƒëƒÉng nh·∫≠p b·∫±ng Google.");
                request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
                return;
            }
            
            // ===== PASSWORD VERIFICATION =====
            // Ki·ªÉm tra password c√≥ ƒë√∫ng kh√¥ng
            if (!checkPassword(password, user.getPasswordHash())) {
                request.setAttribute("message", "‚ùå M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!");
                request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
                return;
            }
            
            // ===== ACCOUNT STATUS CHECK =====
            // Ki·ªÉm tra t√†i kho·∫£n c√≥ b·ªã kh√≥a kh√¥ng
            if (user.isLocked()) {
                request.setAttribute("message", "‚ùå T√†i kho·∫£n ƒë√£ b·ªã kh√≥a. Vui l√≤ng li√™n h·ªá admin!");
                request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
                return;
            }
            
            // ===== SESSION MANAGEMENT =====
            // T·∫°o session v√† l∆∞u th√¥ng tin user
            HttpSession session = request.getSession();
            session.setAttribute("authUser", user);
            System.out.println("‚úÖ [Login] User " + user.getEmail() + " ƒëƒÉng nh·∫≠p th√†nh c√¥ng!");
            
            // ===== REMEMBER ME COOKIE =====
            // X·ª≠ l√Ω "Remember Me" functionality
            if ("on".equals(rememberMe)) {
                setRememberMeCookies(response, email);
                System.out.println("üç™ [Cookie] ƒê√£ set Remember Me cho email: " + email);
            } else {
                clearRememberMeCookies(response);
                System.out.println("üç™ [Cookie] ƒê√£ clear Remember Me cookies");
            }
            
            // ===== REDIRECT AFTER LOGIN =====
            // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang ch·ªß sau khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng
            response.sendRedirect("HomeServlet");
            
        } catch (Exception e) {
            // ===== ERROR HANDLING =====
            // X·ª≠ l√Ω l·ªói database
            System.err.println("‚ùå [Login] Database error: " + e.getMessage());
            request.setAttribute("message", "‚ùå L·ªói h·ªá th·ªëng. Vui l√≤ng th·ª≠ l·∫°i sau!");
            request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
        }
    }

    // ===== SIGN UP HANDLER =====
    /**
     * X·ª≠ l√Ω ƒëƒÉng k√Ω user m·ªõi
     * Quy tr√¨nh:
     * 1. Validate input
     * 2. Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
     * 3. Validate teacher certificate (n·∫øu c·∫ßn)
     * 4. G·ª≠i OTP
     * 5. L∆∞u th√¥ng tin v√†o session
     */
    private void handleSignUp(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        // ===== GET FORM PARAMETERS =====
        // L·∫•y th√¥ng tin t·ª´ form ƒëƒÉng k√Ω
        String email = request.getParameter("email");
        String password = request.getParameter("password");
        String confirmPassword = request.getParameter("confirmPassword");
        String fullName = request.getParameter("fullName");
        String gender = request.getParameter("gender");
        String role = request.getParameter("role");
        
        // ===== INPUT VALIDATION =====
        // Ki·ªÉm tra input c√≥ h·ª£p l·ªá kh√¥ng
        if (email == null || email.trim().isEmpty() || 
            password == null || password.trim().isEmpty() ||
            confirmPassword == null || confirmPassword.trim().isEmpty() ||
            fullName == null || fullName.trim().isEmpty()) {
            request.setAttribute("message", "‚ùå Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
            request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
            return;
        }
        
        // ===== PASSWORD VALIDATION =====
        // Ki·ªÉm tra password v√† confirm password c√≥ kh·ªõp kh√¥ng
        if (!password.equals(confirmPassword)) {
            request.setAttribute("message", "‚ùå M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!");
            request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
            return;
        }
        
        // ===== PASSWORD LENGTH VALIDATION =====
        // Ki·ªÉm tra ƒë·ªô d√†i password
        if (password.length() < 6) {
            request.setAttribute("message", "‚ùå M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±!");
            request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
            return;
        }
        
        // ===== FULL NAME VALIDATION =====
        // Ki·ªÉm tra ƒë·ªô d√†i full name
        if (fullName.length() < 2) {
            request.setAttribute("message", "‚ùå H·ªç v√† t√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±!");
            request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
            return;
        }
        
        try {
            // ===== DATABASE OPERATIONS =====
            // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
            UserDAO userDAO = new UserDAO();
            User existingUser = userDAO.getUserByEmail(email);
            
            if (existingUser != null) {
                // ===== GOOGLE USER CHECK =====
                // Ki·ªÉm tra n·∫øu email ƒë√£ ƒë∆∞·ª£c t·∫°o b·∫±ng Google
                if (userDAO.isGoogleUser(email)) {
                    request.setAttribute("message", "‚ùå T√†i kho·∫£n n√†y ƒë∆∞·ª£c t·∫°o b·∫±ng Google. Vui l√≤ng ƒëƒÉng nh·∫≠p b·∫±ng Google.");
                } else {
                    request.setAttribute("message", "‚ùå Email ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng!");
                }
                request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
                return;
            }
            
            // ===== TEACHER REGISTRATION VALIDATION =====
            // X·ª≠ l√Ω ƒëƒÉng k√Ω gi√°o vi√™n
            boolean isTeacherPending = false;
            String certificatePath = null;
            
            if ("teacher".equals(role)) {
                // ===== CERTIFICATE FILE VALIDATION =====
                // Ki·ªÉm tra file ch·ª©ng ch·ªâ cho gi√°o vi√™n
                Part certificatePart = request.getPart("certificate");
                
                if (certificatePart == null || certificatePart.getSize() == 0) {
                    request.setAttribute("message", "‚ùå Vui l√≤ng upload file ch·ª©ng ch·ªâ khi ƒëƒÉng k√Ω l√†m gi√°o vi√™n!");
                    request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
                    return;
                }
                
                // ===== FILE TYPE VALIDATION =====
                // Ki·ªÉm tra lo·∫°i file c√≥ ph·∫£i PDF kh√¥ng
                String fileName = certificatePart.getSubmittedFileName();
                if (fileName == null || !fileName.toLowerCase().endsWith(".pdf")) {
                    request.setAttribute("message", "‚ùå File ch·ª©ng ch·ªâ ph·∫£i l√† ƒë·ªãnh d·∫°ng PDF!");
                    request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
                    return;
                }
                
                // ===== FILE SIZE VALIDATION =====
                // Ki·ªÉm tra k√≠ch th∆∞·ªõc file
                if (certificatePart.getSize() > 10 * 1024 * 1024) { // 10MB
                    request.setAttribute("message", "‚ùå File ch·ª©ng ch·ªâ kh√¥ng ƒë∆∞·ª£c l·ªõn h∆°n 10MB!");
                    request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
                    return;
                }
                
                // ===== UPLOAD CERTIFICATE =====
                // Upload file ch·ª©ng ch·ªâ l√™n S3
                try {
                    java.io.InputStream is = certificatePart.getInputStream();
                    long size = certificatePart.getSize();
                    String key = "certificates/certificate_" + System.currentTimeMillis() + ".pdf";
                    String contentType = certificatePart.getContentType();
                    certificatePath = S3Util.uploadFile(is, size, key, contentType);
                    isTeacherPending = true;
                    System.out.println("üìÑ [Certificate] ƒê√£ upload certificate: " + certificatePath);
                } catch (Exception e) {
                    System.err.println("‚ùå [Certificate] Upload error: " + e.getMessage());
                    request.setAttribute("message", "‚ùå L·ªói upload file ch·ª©ng ch·ªâ. Vui l√≤ng th·ª≠ l·∫°i!");
                    request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
                    return;
                }
            }
            
            // ===== SEND OTP =====
            // G·ª≠i OTP qua email
            try {
                String otp = String.format("%06d", new java.util.Random().nextInt(999999));
                EmailUtil.sendOtpEmail(email, otp);
                // L∆∞u OTP v√†o session ƒë·ªÉ verify
                HttpSession session = request.getSession();
                session.setAttribute("otp_" + email, otp);
                System.out.println("üìß [OTP] ƒê√£ g·ª≠i OTP cho email: " + email);
            } catch (MessagingException e) {
                System.err.println("‚ùå [OTP] Send error: " + e.getMessage());
                request.setAttribute("message", "‚ùå L·ªói g·ª≠i OTP. Vui l√≤ng th·ª≠ l·∫°i!");
                request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
                return;
            }
            
            // ===== SESSION STORAGE =====
            // L∆∞u th√¥ng tin ƒëƒÉng k√Ω v√†o session ƒë·ªÉ s·ª≠ d·ª•ng trong OTP verification
            HttpSession session = request.getSession();
            session.setAttribute("pending_email", email);
            session.setAttribute("pending_password", password);
            session.setAttribute("pending_fullName", fullName);
            session.setAttribute("pending_gender", gender);
            session.setAttribute("pending_role", role);
            session.setAttribute("pending_isTeacherPending", isTeacherPending);
            session.setAttribute("pending_certificatePath", certificatePath);
            
            // ===== REDIRECT TO OTP PAGE =====
            // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang nh·∫≠p OTP
            response.sendRedirect("LoginJSP/VerifyOtp.jsp");
            
        } catch (Exception e) {
            // ===== ERROR HANDLING =====
            // X·ª≠ l√Ω l·ªói database
            System.err.println("‚ùå [SignUp] Database error: " + e.getMessage());
            request.setAttribute("message", "‚ùå L·ªói h·ªá th·ªëng. Vui l√≤ng th·ª≠ l·∫°i sau!");
            request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
        }
    }

    // ===== FORGOT PASSWORD HANDLER =====
    /**
     * X·ª≠ l√Ω qu√™n m·∫≠t kh·∫©u
     * Quy tr√¨nh:
     * 1. Validate email
     * 2. Ki·ªÉm tra user t·ªìn t·∫°i
     * 3. G·ª≠i OTP
     * 4. L∆∞u th√¥ng tin v√†o session
     */
    private void handleForgotPassword(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        // ===== GET EMAIL PARAMETER =====
        // L·∫•y email t·ª´ form qu√™n m·∫≠t kh·∫©u
        String email = request.getParameter("forgotEmail");
        
        // ===== INPUT VALIDATION =====
        // Ki·ªÉm tra email c√≥ h·ª£p l·ªá kh√¥ng
        if (email == null || email.trim().isEmpty()) {
            request.setAttribute("message", "‚ùå Vui l√≤ng nh·∫≠p email!");
            request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
            return;
        }
        
        try {
            // ===== DATABASE OPERATIONS =====
            // Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng
            UserDAO userDAO = new UserDAO();
            User user = userDAO.getUserByEmail(email);
            
            if (user == null) {
                request.setAttribute("message", "‚ùå Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng!");
                request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
                return;
            }
            
            // ===== SEND OTP =====
            // G·ª≠i OTP qua email
            try {
                String otp = String.format("%06d", new java.util.Random().nextInt(999999));
                EmailUtil.sendOtpEmailForResetPassword(email, otp);
                // L∆∞u OTP v√†o session ƒë·ªÉ verify
                HttpSession session = request.getSession();
                session.setAttribute("otp_" + email, otp);
                System.out.println("üìß [ForgotPassword] ƒê√£ g·ª≠i OTP cho email: " + email);
            } catch (MessagingException e) {
                System.err.println("‚ùå [ForgotPassword] Send error: " + e.getMessage());
                request.setAttribute("message", "‚ùå L·ªói g·ª≠i OTP. Vui l√≤ng th·ª≠ l·∫°i!");
                request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
                return;
            }
            
            // ===== SESSION STORAGE =====
            // L∆∞u email v√†o session ƒë·ªÉ s·ª≠ d·ª•ng trong OTP verification
            HttpSession session = request.getSession();
            session.setAttribute("forgot_email", email);
            
            // ===== REDIRECT TO OTP PAGE =====
            // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang nh·∫≠p OTP
            response.sendRedirect("LoginJSP/VerifyForgotOtp.jsp");
            
        } catch (Exception e) {
            // ===== ERROR HANDLING =====
            // X·ª≠ l√Ω l·ªói database
            System.err.println("‚ùå [ForgotPassword] Database error: " + e.getMessage());
            request.setAttribute("message", "‚ùå L·ªói h·ªá th·ªëng. Vui l√≤ng th·ª≠ l·∫°i sau!");
            request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
        }
    }

    // ===== PASSWORD CHECKING =====
    /**
     * Ki·ªÉm tra password c√≥ ƒë√∫ng kh√¥ng
     * @param rawPassword Password ng∆∞·ªùi d√πng nh·∫≠p
     * @param hashedPassword Password ƒë√£ hash trong database
     * @return true n·∫øu password ƒë√∫ng, false n·∫øu sai
     */
    private boolean checkPassword(String rawPassword, String hashedPassword) {
        // ===== GOOGLE USER CHECK =====
        // N·∫øu password hash b·∫Øt ƒë·∫ßu b·∫±ng "GOOGLE_LOGIN_", ƒë√¢y l√† user Google
        if (hashedPassword != null && hashedPassword.startsWith("GOOGLE_LOGIN_")) {
            return false; // Google user kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p b·∫±ng password
        }
        
        // ===== PASSWORD COMPARISON =====
        // So s√°nh password (hi·ªán t·∫°i ch∆∞a hash, c·∫ßn c·∫£i thi·ªán)
        return rawPassword.equals(hashedPassword);
    }

    // ===== REMEMBER ME COOKIE SETTING =====
    /**
     * Set cookies cho "Remember Me" functionality
     * @param response HTTP response
     * @param email Email c·ªßa user
     */
    private void setRememberMeCookies(HttpServletResponse response, String email) {
        // ===== EMAIL COOKIE =====
        // Set cookie cho email
        setCookie(response, "email", email, 30 * 24 * 60 * 60, false); // 30 days
        
        // ===== REMEMBER ME FLAG =====
        // Set cookie cho remember me flag
        setCookie(response, "rememberMe", "true", 30 * 24 * 60 * 60, false); // 30 days
    }

    // ===== REMEMBER ME COOKIE CLEARING =====
    /**
     * Clear cookies cho "Remember Me" functionality
     * @param response HTTP response
     */
    private void clearRememberMeCookies(HttpServletResponse response) {
        // ===== CLEAR EMAIL COOKIE =====
        // Clear cookie cho email
        setCookie(response, "email", "", 0, false);
        
        // ===== CLEAR REMEMBER ME FLAG =====
        // Clear cookie cho remember me flag
        setCookie(response, "rememberMe", "", 0, false);
    }

    // ===== REMEMBERED EMAIL GETTER =====
    /**
     * L·∫•y email t·ª´ cookie "Remember Me"
     * @param request HTTP request
     * @return Email ƒë√£ l∆∞u trong cookie ho·∫∑c null
     */
    private String getRememberedEmail(HttpServletRequest request) {
        return getCookieValue(request, "email");
    }

    // ===== COOKIE VALUE GETTER =====
    /**
     * L·∫•y gi√° tr·ªã c·ªßa m·ªôt cookie theo t√™n
     * @param request HTTP request
     * @param cookieName T√™n cookie c·∫ßn l·∫•y
     * @return Gi√° tr·ªã cookie ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y
     */
    private String getCookieValue(HttpServletRequest request, String cookieName) {
        // ===== GET ALL COOKIES =====
        // L·∫•y t·∫•t c·∫£ cookies t·ª´ request
        Cookie[] cookies = request.getCookies();
        
        if (cookies != null) {
            // ===== SEARCH FOR SPECIFIC COOKIE =====
            // T√¨m cookie theo t√™n
            for (Cookie cookie : cookies) {
                if (cookieName.equals(cookie.getName())) {
                    return cookie.getValue();
                }
            }
        }
        return null;
    }

    // ===== COOKIE SETTER =====
    /**
     * Set m·ªôt cookie v·ªõi c√°c tham s·ªë c·ª• th·ªÉ
     * @param response HTTP response
     * @param name T√™n cookie
     * @param value Gi√° tr·ªã cookie
     * @param maxAge Th·ªùi gian s·ªëng (gi√¢y)
     * @param httpOnly C√≥ ph·∫£i httpOnly cookie kh√¥ng
     */
    private void setCookie(HttpServletResponse response, String name, String value, int maxAge, boolean httpOnly) {
        // ===== CREATE COOKIE =====
        // T·∫°o cookie m·ªõi
        Cookie cookie = new Cookie(name, value);
        cookie.setMaxAge(maxAge);
        cookie.setHttpOnly(httpOnly);
        cookie.setPath("/"); // Cookie c√≥ hi·ªáu l·ª±c cho to√†n b·ªô website
        
        // ===== ADD COOKIE TO RESPONSE =====
        // Th√™m cookie v√†o response
        response.addCookie(cookie);
    }
}
