package controller.Authentication;

import controller.Email.EmailUtil;
import Dao.CoursesDAO;
import Dao.UserDAO;
import jakarta.mail.MessagingException;
import java.io.IOException;
import java.sql.SQLException;
import java.util.List;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.MultipartConfig;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import model.Course;
import model.User;
import service.PasswordService;
import jakarta.servlet.http.Part;
import config.S3Util;

@WebServlet(name = "LoginServlet", urlPatterns = {"/login"})
@MultipartConfig
public class LoginServlet extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        // ƒê·ªçc cookie ƒë·ªÉ t·ª± ƒë·ªông ƒëi·ªÅn email n·∫øu user ƒë√£ ch·ªçn "Remember Me"
        String rememberedEmail = getRememberedEmail(request);
        if (rememberedEmail != null && !rememberedEmail.trim().isEmpty()) {
            request.setAttribute("rememberedEmail", rememberedEmail);
            request.setAttribute("rememberMe", "on"); // T·ª± ƒë·ªông check checkbox
            System.out.println("üç™ [Cookie] ƒê√£ ƒë·ªçc email t·ª´ cookie: " + rememberedEmail);
        }
        
        // ƒê·ªçc cookie cho language preference
        String language = getCookieValue(request, "language");
        if (language != null) {
            request.setAttribute("userLanguage", language);
            System.out.println("üåê [Cookie] Language preference: " + language);
        }
        
        // ƒê·ªçc cookie cho theme preference
        String theme = getCookieValue(request, "theme");
        if (theme != null) {
            request.setAttribute("userTheme", theme);
            System.out.println("üé® [Cookie] Theme preference: " + theme);
        }
        
        // X·ª≠ l√Ω error t·ª´ Google OAuth
        String error = request.getParameter("error");
        if (error != null) {
            String errorMessage = "";
            switch (error) {
                case "google_oauth_error":
                    errorMessage = "C√≥ l·ªói x·∫£y ra khi ƒëƒÉng nh·∫≠p b·∫±ng Google. Vui l√≤ng th·ª≠ l·∫°i.";
                    break;
                case "no_code":
                    errorMessage = "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c m√£ x√°c th·ª±c t·ª´ Google. Vui l√≤ng th·ª≠ l·∫°i.";
                    break;
                case "create_user_failed":
                    errorMessage = "Kh√¥ng th·ªÉ t·∫°o t√†i kho·∫£n m·ªõi. Vui l√≤ng th·ª≠ l·∫°i.";
                    break;
                case "google_login_failed":
                    errorMessage = "ƒêƒÉng nh·∫≠p Google th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.";
                    break;
                case "token_exchange_failed":
                    errorMessage = "Kh√¥ng th·ªÉ x√°c th·ª±c v·ªõi Google. Vui l√≤ng th·ª≠ l·∫°i.";
                    break;
                default:
                    errorMessage = "C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.";
                    break;
            }
            request.setAttribute("message", errorMessage);
        }
        
        request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        String action = request.getParameter("action");

        if ("signin".equals(action)) {
            handleSignIn(request, response);
            return;
        }

        if ("signup".equals(action)) {
            handleSignUp(request, response);
            return;
        }

        if ("change_pass".equals(action)) {
            doPut(request, response);
            return;
        }

        if ("forgot_pass".equals(action)) {
            handleForgotPassword(request, response);
            return;
        }
    }

    @Override
    protected void doPut(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String email = request.getParameter("email");
        String oldpass = request.getParameter("oldPassword");
        String newpass = request.getParameter("newPassword");

        boolean isPasswordChanged = new PasswordService().changePassword(email, oldpass, newpass);
        User checkEmailExist = new UserDAO().getUserByEmail(email);
        if (isPasswordChanged) {
            request.setAttribute("message", "ƒê√£ thay ƒë·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!");
            request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
        } else {
            if (checkEmailExist == null) {
                request.setAttribute("message", "Email kh√¥ng t·ªìn t·∫°i!");

                request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
                return;
            }
            request.setAttribute("message", "M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng!");
            request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
        }
    }
//Dang nhap
    private void handleSignIn(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        String email = request.getParameter("email");
        String password = request.getParameter("password");
        String rememberMe = request.getParameter("rememberMe");

        UserDAO dao = new UserDAO();
        User user = dao.getUserByEmail(email);

        if (user != null) {
            // Ki·ªÉm tra xem user c√≥ ph·∫£i l√† Google user kh√¥ng
            if (dao.isGoogleUser(email)) {
                System.out.println("üö´ [Login] User c·ªë g·∫Øng ƒëƒÉng nh·∫≠p b·∫±ng password cho Google account: " + email);
                request.setAttribute("message", "‚ùå T√†i kho·∫£n n√†y ƒë∆∞·ª£c t·∫°o b·∫±ng Google. Vui l√≤ng ƒëƒÉng nh·∫≠p b·∫±ng Google.");
                request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
                return;
            }
            
            if (checkPassword(password, user.getPasswordHash())) {  
                if (!user.isActive()) {  // S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c getter isActive() n·∫øu tr∆∞·ªùng l√† boolean
                    request.setAttribute("message", "T√†i kho·∫£n ƒë√£ b·ªã kh√≥a, vui l√≤ng li√™n h·ªá admin ƒë·ªÉ m·ªü kh√≥a");
                    request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
                    return;
                }         
                User fullUser = null;
                try {
                    fullUser = dao.getUserById(user.getUserID());
                } catch (SQLException e) {
                    e.printStackTrace();
                    request.setAttribute("message", "L·ªói h·ªá th·ªëng khi ƒëƒÉng nh·∫≠p!");

                    request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
                    return;
                }

                HttpSession session = request.getSession();
                session.setAttribute("authUser", fullUser);
                session.setAttribute("userID", fullUser.getUserID());
                session.setMaxInactiveInterval(60 * 60 * 24);

                // Load premium info for all users (Free, Premium, Teacher, Admin)
                try {
                    Dao.UserPremiumDAO userPremiumDAO = new Dao.UserPremiumDAO();
                    model.UserPremium premium = userPremiumDAO.getCurrentUserPremium(fullUser.getUserID());
                    if (premium != null) {
                        session.setAttribute("userPremium", premium);
                        System.out.println("Premium info loaded for user: " + fullUser.getUserID() + " (role: " + fullUser.getRoleID() + ")");
                    }
                } catch (SQLException e) {
                    System.out.println("Error loading premium info: " + e.getMessage());
                    e.printStackTrace();
                }

                if ("on".equals(rememberMe)) {
                    setRememberMeCookies(response, email);
                } else {
                    clearRememberMeCookies(response);
                }

                // ‚úÖ Th√™m danh s√°ch kh√≥a h·ªçc ƒë·ªÅ xu·∫•t
                CoursesDAO coursesDAO = new CoursesDAO();
                List<Course> suggestedCourses = coursesDAO.getSuggestedCourses();
                request.setAttribute("suggestedCourses", suggestedCourses);

                // ‚úÖ Forward v·ªÅ index.jsp ƒë·ªÉ gi·ªØ l·∫°i d·ªØ li·ªáu
                request.getRequestDispatcher("/index.jsp").forward(request, response);
            } else {
                request.setAttribute("message", "Sai email ho·∫∑c m·∫≠t kh·∫©u");
                request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
            }
        } else {
            request.setAttribute("message", "Sai email ho·∫∑c m·∫≠t kh·∫©u");
            request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
        }
    }

// ƒêƒÉng k√Ω
    private void handleSignUp(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String email = request.getParameter("email");
        String fullName = request.getParameter("fullName");
        String password = request.getParameter("password");
        String repass = request.getParameter("repass");
        String gender = request.getParameter("gender");
        String role = request.getParameter("role");
        Part certificatePart = null;
        String certificatePath = null;
        boolean isTeacherPending = false;

        // Ki·ªÉm tra h·ªç t√™n
        if (fullName == null || fullName.trim().isEmpty()) {
            request.setAttribute("message_signup", "‚ùå Vui l√≤ng nh·∫≠p h·ªç v√† t√™n!");
            request.setAttribute("registerActive", "true");
            request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
            return;
        }
        
        // Ki·ªÉm tra ƒë·ªô d√†i h·ªç t√™n
        if (fullName.trim().length() < 2) {
            request.setAttribute("message_signup", "‚ùå H·ªç v√† t√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±!");
            request.setAttribute("registerActive", "true");
            request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
            return;
        }
        
        // Ki·ªÉm tra m·∫≠t kh·∫©u v√† x√°c nh·∫≠n m·∫≠t kh·∫©u
        if (!password.equals(repass)) {
            request.setAttribute("message_signup", "M·∫≠t kh·∫©u kh√¥ng tr√πng kh·ªõp!");
            request.setAttribute("registerActive", "true");
            request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
            return;
        }

        // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i
        User existingUser = new UserDAO().getUserByEmail(email);
        if (existingUser != null) {
            // Ki·ªÉm tra xem user n√†y c√≥ ƒë∆∞·ª£c t·∫°o b·∫±ng Google kh√¥ng
            UserDAO userDAO = new UserDAO();
            if (userDAO.isGoogleUser(email)) {
                System.out.println("üö´ [Registration] Email ƒë√£ t·ªìn t·∫°i v√† ƒë∆∞·ª£c t·∫°o b·∫±ng Google: " + email);
                request.setAttribute("message_signup", "‚ùå T√†i kho·∫£n n√†y ƒë∆∞·ª£c t·∫°o b·∫±ng Google. Vui l√≤ng ƒëƒÉng nh·∫≠p b·∫±ng Google.");
                request.setAttribute("registerActive", "true");
                request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
                return;
            } else {
                System.out.println("‚ö†Ô∏è [Registration] Email ƒë√£ t·ªìn t·∫°i (kh√¥ng ph·∫£i Google): " + email);
                request.setAttribute("message_signup", "Email ƒë√£ t·ªìn t·∫°i!");
                request.setAttribute("registerActive", "true");
                request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
                return;
            }
        }

        // N·∫øu l√† gi√°o vi√™n, x·ª≠ l√Ω file ch·ª©ng ch·ªâ
        if ("teacher".equals(role)) {
            isTeacherPending = true;
            try {
                certificatePart = request.getPart("certificate");
                
                // Ki·ªÉm tra file c√≥ ƒë∆∞·ª£c upload kh√¥ng
                if (certificatePart == null || certificatePart.getSize() == 0) {
                    request.setAttribute("message_signup", "‚ùå B·∫°n ph·∫£i upload ch·ª©ng ch·ªâ ƒë·ªÉ ƒëƒÉng k√Ω l√†m gi√°o vi√™n!");
                    request.setAttribute("registerActive", "true");
                    request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
                    return;
                }
                
                // Ki·ªÉm tra k√≠ch th∆∞·ªõc file (10MB)
                long fileSize = certificatePart.getSize();
                long maxSize = 10 * 1024 * 1024; // 10MB
                if (fileSize > maxSize) {
                    request.setAttribute("message_signup", "‚ùå File qu√° l·ªõn! K√≠ch th∆∞·ªõc t·ªëi ƒëa l√† 10MB. File hi·ªán t·∫°i: " + 
                        String.format("%.2f", fileSize / (1024.0 * 1024.0)) + "MB");
                    request.setAttribute("registerActive", "true");
                    request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
                    return;
                }
                
                // Ki·ªÉm tra t√™n file
                String originalFileName = certificatePart.getSubmittedFileName();
                if (originalFileName == null || originalFileName.trim().isEmpty()) {
                    request.setAttribute("message_signup", "‚ùå T√™n file kh√¥ng h·ª£p l·ªá!");
                    request.setAttribute("registerActive", "true");
                    request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
                    return;
                }
                
                // Ki·ªÉm tra ƒë·ªãnh d·∫°ng file (ch·ªâ ch·∫•p nh·∫≠n PDF)
                if (!originalFileName.toLowerCase().endsWith(".pdf")) {
                    request.setAttribute("message_signup", "‚ùå Ch·ªâ ch·∫•p nh·∫≠n file PDF! File hi·ªán t·∫°i: " + originalFileName);
                    request.setAttribute("registerActive", "true");
                    request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
                    return;
                }
                
                // Ki·ªÉm tra content type
                String contentType = certificatePart.getContentType();
                if (contentType == null || !contentType.equals("application/pdf")) {
                    request.setAttribute("message_signup", "‚ùå File kh√¥ng ph·∫£i ƒë·ªãnh d·∫°ng PDF h·ª£p l·ªá!");
                    request.setAttribute("registerActive", "true");
                    request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
                    return;
                }
                
                try {
                    // ƒê·ªçc file t·ª´ Part
                    java.io.InputStream is = certificatePart.getInputStream();
                    long size = certificatePart.getSize();
                    String key = "certificates/certificate_" + System.currentTimeMillis() + ".pdf";
                    
                    // Upload l√™n S3
                    String s3Url = config.S3Util.uploadFile(is, size, key, contentType);
                    certificatePath = key; // L∆∞u key S3 v√†o DB
                    System.out.println("‚úÖ [CertificateUpload] Upload th√†nh c√¥ng S3: " + s3Url);
                } catch (Exception e) {
                    System.err.println("‚ùå [CertificateUpload] L·ªói upload ch·ª©ng ch·ªâ S3: " + e.getMessage());
                    e.printStackTrace();
                    // Fallback: l∆∞u local n·∫øu upload S3 th·∫•t b·∫°i
                    try {
                        String fileName = System.currentTimeMillis() + "_" + certificatePart.getSubmittedFileName();
                        String uploadPath = getServletContext().getRealPath("/certificates/");
                        java.io.File uploadDir = new java.io.File(uploadPath);
                        if (!uploadDir.exists()) uploadDir.mkdirs();
                        String filePath = uploadPath + java.io.File.separator + fileName;
                        certificatePart.write(filePath);
                        certificatePath = "certificates/" + fileName;
                        System.out.println("‚úÖ [CertificateUpload] Upload local th√†nh c√¥ng: " + filePath);
                    } catch (Exception localError) {
                        System.err.println("‚ùå [CertificateUpload] L·ªói upload local: " + localError.getMessage());
                        request.setAttribute("message_signup", "‚ùå Kh√¥ng th·ªÉ upload file! Vui l√≤ng th·ª≠ l·∫°i sau.");
                        request.setAttribute("registerActive", "true");
                        request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
                        return;
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
                request.setAttribute("message_signup", "‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω file ch·ª©ng ch·ªâ!");
                request.setAttribute("registerActive", "true");
                request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
                return;
            }
        }

        HttpSession session = request.getSession();
        session.setAttribute("pending_email", email);
        session.setAttribute("pending_fullName", fullName);
        session.setAttribute("pending_password", password);
        session.setAttribute("pending_gender", gender);
        session.setAttribute("pending_role", role);
        session.setAttribute("pending_isTeacherPending", isTeacherPending);
        session.setAttribute("pending_certificatePath", certificatePath);

        request.setAttribute("email", email);
        request.setAttribute("fullName", fullName);
        request.setAttribute("password", password);
        request.setAttribute("gender", gender);
        request.setAttribute("role", role);
        request.setAttribute("registerActive", "true");
        request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
    }

// Qu√™n m·∫≠t kh·∫©u
    private void handleForgotPassword(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        String email = request.getParameter("email");

        // K√≠ch ho·∫°t giao di·ªán form qu√™n m·∫≠t kh·∫©u (·∫©n hi·ªán b·∫±ng JSTL)
        request.setAttribute("showForgotForm", true);

        if (email == null || email.trim().isEmpty()) {
            request.setAttribute("message_forgot", "Vui l√≤ng nh·∫≠p email.");
            request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
            return;
        }

        User user = new UserDAO().getUserByEmail(email);
        if (user == null) {
            request.setAttribute("message_forgot", "Email kh√¥ng t·ªìn t·∫°i.");
            request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
            return;
        }

        // ‚úÖ Email h·ª£p l·ªá ‚Üí hi·ªÉn th·ªã form OTP gi·ªëng nh∆∞ khi ƒëƒÉng k√Ω
        request.getSession().setAttribute("resetEmail", email); // d√πng cho g·ª≠i OTP v√† verify
        request.setAttribute("showOtpForm", true);              // JSP d√πng ƒë·ªÉ hi·ªán form nh·∫≠p m√£ OTP
        request.setAttribute("email", email);                   // binding l·∫°i ƒë·ªÉ form hi·ªÉn th·ªã email

        request.getRequestDispatcher("LoginJSP/LoginIndex.jsp").forward(request, response);
    }

    private boolean checkPassword(String rawPassword, String hashedPassword) {
        // N·∫øu user ƒëƒÉng nh·∫≠p b·∫±ng Google, kh√¥ng cho ph√©p ƒëƒÉng nh·∫≠p b·∫±ng password th√¥ng th∆∞·ªùng
        if (hashedPassword != null && hashedPassword.startsWith("GOOGLE_LOGIN_")) {
            return false; // User n√†y ph·∫£i ƒëƒÉng nh·∫≠p b·∫±ng Google
        }
        return rawPassword.equals(hashedPassword);
    }

    private void setRememberMeCookies(HttpServletResponse response, String email) {
        Cookie emailCookie = new Cookie("email", email);
        emailCookie.setHttpOnly(true);
        emailCookie.setMaxAge(60 * 60 * 24 * 7); // 7 ng√†y
        emailCookie.setPath("/");
        response.addCookie(emailCookie);
        
        // Th√™m cookie cho language preference (m·∫∑c ƒë·ªãnh l√† Vietnamese)
        Cookie languageCookie = new Cookie("language", "vi");
        languageCookie.setHttpOnly(false); // Cho ph√©p JavaScript ƒë·ªçc
        languageCookie.setMaxAge(60 * 60 * 24 * 30); // 30 ng√†y
        languageCookie.setPath("/");
        response.addCookie(languageCookie);
        
        // Th√™m cookie cho theme preference (m·∫∑c ƒë·ªãnh l√† light)
        Cookie themeCookie = new Cookie("theme", "light");
        themeCookie.setHttpOnly(false); // Cho ph√©p JavaScript ƒë·ªçc
        themeCookie.setMaxAge(60 * 60 * 24 * 30); // 30 ng√†y
        themeCookie.setPath("/");
        response.addCookie(themeCookie);
        
        System.out.println("üç™ [Cookie] ƒê√£ set cookies cho user: " + email);
    }

    private void clearRememberMeCookies(HttpServletResponse response) {
        Cookie emailCookie = new Cookie("email", "");
        emailCookie.setMaxAge(0);
        emailCookie.setPath("/");
        response.addCookie(emailCookie);
        
        // Clear language v√† theme cookies n·∫øu c·∫ßn
        Cookie languageCookie = new Cookie("language", "");
        languageCookie.setMaxAge(0);
        languageCookie.setPath("/");
        response.addCookie(languageCookie);
        
        Cookie themeCookie = new Cookie("theme", "");
        themeCookie.setMaxAge(0);
        themeCookie.setPath("/");
        response.addCookie(themeCookie);
        
        System.out.println("üç™ [Cookie] ƒê√£ clear cookies");
    }
    
    private String getRememberedEmail(HttpServletRequest request) {
        Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (Cookie cookie : cookies) {
                if ("email".equals(cookie.getName())) {
                    String email = cookie.getValue();
                    if (email != null && !email.trim().isEmpty()) {
                        return email;
                    }
                }
            }
        }
        return null;
    }
    
    private String getCookieValue(HttpServletRequest request, String cookieName) {
        Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (Cookie cookie : cookies) {
                if (cookieName.equals(cookie.getName())) {
                    String value = cookie.getValue();
                    if (value != null && !value.trim().isEmpty()) {
                        return value;
                    }
                }
            }
        }
        return null;
    }
    
    private void setCookie(HttpServletResponse response, String name, String value, int maxAge, boolean httpOnly) {
        Cookie cookie = new Cookie(name, value);
        cookie.setHttpOnly(httpOnly);
        cookie.setMaxAge(maxAge);
        cookie.setPath("/");
        response.addCookie(cookie);
        System.out.println("üç™ [Cookie] ƒê√£ set cookie: " + name + " = " + value);
    }
}
