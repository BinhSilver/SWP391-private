package controller.Authentication;

// ===== IMPORT STATEMENTS =====
import java.io.IOException;                 // IO Exception
import jakarta.servlet.ServletException;    // Servlet Exception
import jakarta.servlet.annotation.WebServlet;       // WebServlet annotation
import jakarta.servlet.http.*;              // HTTP Servlet classes

// ===== GOOGLE API CLIENT IMPORTS =====
import com.google.api.client.googleapis.auth.oauth2.*;  // Google OAuth classes
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;  // HTTP Transport
import com.google.api.client.json.jackson2.JacksonFactory;  // JSON Factory

// ===== GOOGLE OAUTH2 SERVICE IMPORTS =====
import com.google.api.services.oauth2.Oauth2;  // OAuth2 service
import com.google.api.services.oauth2.model.Userinfo;  // User info model

// ===== APPLICATION IMPORTS =====
import Dao.UserDAO;                         // Data Access Object cho Users
import model.User;                          // User model

// ===== SERVLET CONFIGURATION =====
/**
 * OAuth2CallbackServlet - Servlet x·ª≠ l√Ω callback t·ª´ Google OAuth
 * 
 * Ch·ª©c nƒÉng ch√≠nh:
 * - Nh·∫≠n authorization code t·ª´ Google
 * - Exchange code l·∫•y access token
 * - L·∫•y th√¥ng tin user t·ª´ Google
 * - T·∫°o ho·∫∑c c·∫≠p nh·∫≠t user trong database
 * - Set session v√† redirect
 * 
 * URL mapping: /oauth2callback
 */
@WebServlet("/oauth2callback")
public class OAuth2CallbackServlet extends HttpServlet {
    
    // ===== GOOGLE OAUTH CONSTANTS =====
    // Client ID t·ª´ Google Cloud Console
    private static final String CLIENT_ID = "1025289027596-qkbrdlnf5s31pjg2s7mkmdg0tj8s5c65.apps.googleusercontent.com";
    
    // Client Secret t·ª´ Google Cloud Console
    private static final String CLIENT_SECRET = "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";
    
    // URL callback sau khi Google x√°c th·ª±c xong
    private static final String REDIRECT_URI = "https://wasabii.id.vn/oauth2callback";

    // ===== GET METHOD - HANDLE OAUTH CALLBACK =====
    /**
     * X·ª≠ l√Ω GET request t·ª´ Google OAuth callback
     * Quy tr√¨nh:
     * 1. Nh·∫≠n authorization code t·ª´ Google
     * 2. Exchange code l·∫•y access token
     * 3. L·∫•y th√¥ng tin user t·ª´ Google
     * 4. T·∫°o ho·∫∑c c·∫≠p nh·∫≠t user trong database
     * 5. Set session v√† redirect
     */
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        
        // ===== GET OAUTH PARAMETERS =====
        // L·∫•y authorization code v√† error t·ª´ Google
        String code = request.getParameter("code");
        String error = request.getParameter("error");
        
        // ===== ERROR HANDLING =====
        // Ki·ªÉm tra l·ªói t·ª´ Google
        if (error != null) {
            System.err.println("‚ùå [OAuth2Callback] Google OAuth error: " + error);
            response.sendRedirect(request.getContextPath() + "/login?error=google_oauth_error");
            return;
        }
        
        // ===== CODE VALIDATION =====
        // Ki·ªÉm tra c√≥ nh·∫≠n ƒë∆∞·ª£c code kh√¥ng
        if (code == null) {
            System.err.println("‚ùå [OAuth2Callback] Kh√¥ng nh·∫≠n ƒë∆∞·ª£c code t·ª´ Google");
            response.sendRedirect(request.getContextPath() + "/login?error=no_code");
            return;
        }

        try {
            // ===== OAUTH PROCESSING =====
            // B·∫Øt ƒë·∫ßu x·ª≠ l√Ω Google OAuth callback
            System.out.println("üîÑ [OAuth2Callback] B·∫Øt ƒë·∫ßu x·ª≠ l√Ω Google OAuth callback v·ªõi code: " + code.substring(0, Math.min(code.length(), 10)) + "...");
            
            // ===== STEP 1: EXCHANGE CODE FOR ACCESS TOKEN =====
            // S·ª≠ d·ª•ng Google API Client ƒë·ªÉ exchange code l·∫•y access token
            GoogleTokenResponse tokenResponse = new GoogleAuthorizationCodeTokenRequest(
                    GoogleNetHttpTransport.newTrustedTransport(),
                    JacksonFactory.getDefaultInstance(),
                    CLIENT_ID,
                    CLIENT_SECRET,
                    code,
                    REDIRECT_URI
            ).execute();

            // ===== STEP 2: CREATE CREDENTIAL =====
            // T·∫°o credential v·ªõi access token
            GoogleCredential credential = new GoogleCredential.Builder()
                    .setTransport(GoogleNetHttpTransport.newTrustedTransport())
                    .setJsonFactory(JacksonFactory.getDefaultInstance())
                    .setClientSecrets(CLIENT_ID, CLIENT_SECRET)
                    .build()
                    .setAccessToken(tokenResponse.getAccessToken());

            // ===== STEP 3: GET USER INFO FROM GOOGLE =====
            // L·∫•y th√¥ng tin user t·ª´ Google OAuth2 API
            Oauth2 oauth2 = new Oauth2.Builder(
                    GoogleNetHttpTransport.newTrustedTransport(),
                    JacksonFactory.getDefaultInstance(),
                    credential)
                    .setApplicationName("Wasabii")
                    .build();

            Userinfo userInfo = oauth2.userinfo().get().execute();
            String email = userInfo.getEmail();
            String name = userInfo.getName();
            String googleId = userInfo.getId();

            System.out.println("üë§ [OAuth2Callback] Th√¥ng tin user t·ª´ Google - Email: " + email + ", Name: " + name + ", GoogleID: " + googleId);

            // ===== DATABASE OPERATIONS =====
            // Ki·ªÉm tra user ƒë√£ c√≥ trong DB ch∆∞a, n·∫øu ch∆∞a th√¨ th√™m m·ªõi
            UserDAO userDAO = new UserDAO();
            User user = userDAO.getUserByEmail(email);
            
            if (user == null) {
                // ===== CREATE NEW USER =====
                // T·∫°o user m·ªõi t·ª´ Google login
                System.out.println("üÜï [OAuth2Callback] T·∫°o user m·ªõi t·ª´ Google login");
                user = new User();
                user.setEmail(email);
                user.setFullName(name);
                user.setGoogleID(googleId);
                user.setRoleID(1); // Role m·∫∑c ƒë·ªãnh l√† student
                user.setActive(true);
                user.setLocked(false);
                user.setPasswordHash("GOOGLE_LOGIN_" + System.currentTimeMillis()); // Password m·∫∑c ƒë·ªãnh cho Google login
                
                try {
                    // ===== INSERT USER TO DATABASE =====
                    // Th√™m user m·ªõi v√†o database
                    userDAO.insertUser(user);
                    
                    // ===== GET INSERTED USER =====
                    // L·∫•y l·∫°i user ƒë√£ insert ƒë·ªÉ c√≥ UserID
                    user = userDAO.getUserByEmail(email);
                    System.out.println("‚úÖ [OAuth2Callback] T·∫°o user th√†nh c√¥ng v·ªõi UserID: " + user.getUserID());
                    
                    // ===== SESSION MANAGEMENT =====
                    // L∆∞u th√¥ng tin user v√†o session
                    HttpSession session = request.getSession();
                    session.setAttribute("authUser", user);
                    session.setAttribute("userID", user.getUserID());
                    session.setMaxInactiveInterval(60 * 60 * 24); // 24 gi·ªù
                    
                    // ===== REDIRECT FOR NEW USER =====
                    // Redirect ƒë·∫øn trang ch·ªçn vai tr√≤ cho user m·ªõi
                    response.sendRedirect(request.getContextPath() + "/choose-role");
                    return;
                    
                } catch (Exception e) {
                    // ===== ERROR HANDLING =====
                    // X·ª≠ l√Ω l·ªói khi t·∫°o user m·ªõi
                    e.printStackTrace();
                    System.err.println("‚ùå [OAuth2Callback] L·ªói khi t·∫°o t√†i kho·∫£n m·ªõi: " + e.getMessage());
                    response.sendRedirect(request.getContextPath() + "/login?error=create_user_failed");
                    return;
                }
            } else {
                // ===== EXISTING USER HANDLING =====
                // User ƒë√£ t·ªìn t·∫°i, c·∫≠p nh·∫≠t GoogleID n·∫øu ch∆∞a c√≥
                System.out.println("üë§ [OAuth2Callback] User ƒë√£ t·ªìn t·∫°i, UserID: " + user.getUserID());
                
                if (user.getGoogleID() == null || user.getGoogleID().isEmpty()) {
                    // ===== UPDATE GOOGLE ID =====
                    // C·∫≠p nh·∫≠t GoogleID cho user hi·ªán t·∫°i
                    user.setGoogleID(googleId);
                    try {
                        userDAO.updateUser(user);
                        System.out.println("‚úÖ [OAuth2Callback] C·∫≠p nh·∫≠t GoogleID th√†nh c√¥ng");
                    } catch (Exception e) {
                        e.printStackTrace();
                        // Kh√¥ng d·ª´ng qu√° tr√¨nh login n·∫øu update th·∫•t b·∫°i
                        System.err.println("‚ö†Ô∏è [OAuth2Callback] L·ªói c·∫≠p nh·∫≠t GoogleID: " + e.getMessage());
                    }
                }

                // ===== LOAD PREMIUM INFO =====
                // Load premium info for all users (Free, Premium, Teacher, Admin)
                try {
                    Dao.UserPremiumDAO userPremiumDAO = new Dao.UserPremiumDAO();
                    model.UserPremium premium = userPremiumDAO.getCurrentUserPremium(user.getUserID());
                    if (premium != null) {
                        System.out.println("üíé [OAuth2Callback] Premium info loaded for Google user: " + user.getUserID() + " (role: " + user.getRoleID() + ")");
                    }
                } catch (Exception e) {
                    System.out.println("‚ö†Ô∏è [OAuth2Callback] Error loading premium info for Google user: " + e.getMessage());
                    e.printStackTrace();
                }

                // ===== SESSION MANAGEMENT =====
                // L∆∞u th√¥ng tin user v√†o session
                HttpSession session = request.getSession();
                session.setAttribute("authUser", user);
                session.setAttribute("userID", user.getUserID());
                session.setMaxInactiveInterval(60 * 60 * 24); // 24 gi·ªù

                // ===== REDIRECT FOR EXISTING USER =====
                // Redirect v·ªÅ trang ch·ªß cho user ƒë√£ t·ªìn t·∫°i
                System.out.println("‚úÖ [OAuth2Callback] ƒêƒÉng nh·∫≠p Google th√†nh c√¥ng, chuy·ªÉn h∆∞·ªõng v·ªÅ trang ch·ªß");
                response.sendRedirect(request.getContextPath() + "/HomeServlet");
            }

        } catch (Exception e) {
            // ===== ERROR HANDLING =====
            // X·ª≠ l√Ω l·ªói ƒëƒÉng nh·∫≠p Google
            e.printStackTrace();
            System.err.println("‚ùå [OAuth2Callback] L·ªói ƒëƒÉng nh·∫≠p Google: " + e.getMessage());
            response.sendRedirect(request.getContextPath() + "/login?error=google_login_failed");
        }
    }
}