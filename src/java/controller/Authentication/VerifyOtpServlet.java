package controller.Authentication;

// ===== IMPORT STATEMENTS =====
import Dao.UserDAO;                         // Data Access Object cho Users
import model.User;                          // User model
import jakarta.servlet.ServletException;    // Servlet Exception
import jakarta.servlet.annotation.WebServlet;       // WebServlet annotation
import jakarta.servlet.http.HttpServlet;           // Base HTTP Servlet
import jakarta.servlet.http.HttpServletRequest;    // HTTP Request
import jakarta.servlet.http.HttpServletResponse;   // HTTP Response
import jakarta.servlet.http.HttpSession;           // Session handling
import java.io.IOException;                 // IO Exception

// ===== SERVLET CONFIGURATION =====
/**
 * VerifyOtpServlet - Servlet x·ª≠ l√Ω x√°c th·ª±c OTP khi ƒëƒÉng k√Ω
 * 
 * Ch·ª©c nƒÉng ch√≠nh:
 * - X√°c th·ª±c m√£ OTP ng∆∞·ªùi d√πng nh·∫≠p
 * - Ki·ªÉm tra th·ªùi gian h·∫øt h·∫°n OTP (5 ph√∫t)
 * - T·∫°o t√†i kho·∫£n m·ªõi sau khi x√°c th·ª±c th√†nh c√¥ng
 * - X√≥a d·ªØ li·ªáu t·∫°m trong session
 * 
 * URL mapping: /verifyOtp
 */
@WebServlet(name = "VerifyOtpServlet", urlPatterns = {"/verifyOtp"})
public class VerifyOtpServlet extends HttpServlet {

    // ===== POST METHOD - VERIFY OTP =====
    /**
     * X·ª≠ l√Ω POST request ƒë·ªÉ x√°c th·ª±c OTP
     * Quy tr√¨nh:
     * 1. L·∫•y OTP t·ª´ form v√† session
     * 2. Ki·ªÉm tra OTP c√≥ ƒë√∫ng kh√¥ng
     * 3. Ki·ªÉm tra OTP c√≥ h·∫øt h·∫°n kh√¥ng
     * 4. T·∫°o t√†i kho·∫£n m·ªõi
     * 5. X√≥a d·ªØ li·ªáu t·∫°m
     * 6. Tr·∫£ v·ªÅ k·∫øt qu·∫£ JSON
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        // ===== GET FORM PARAMETERS =====
        // L·∫•y th√¥ng tin t·ª´ form x√°c th·ª±c OTP
        String email = request.getParameter("email");
        String otpInput = request.getParameter("otp");

        // ===== SESSION RETRIEVAL =====
        // L·∫•y OTP v√† th·ªùi gian t·ª´ session
        HttpSession session = request.getSession();
        String otpSession = (String) session.getAttribute("otp_" + email);
        Long otpTime = (Long) session.getAttribute("otp_time_" + email);

        // ===== RESPONSE SETUP =====
        // Thi·∫øt l·∫≠p response type cho JSON
        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");

        // ===== OTP VALIDATION =====
        // Ki·ªÉm tra OTP c√≥ ƒë√∫ng kh√¥ng
        if (otpSession == null || otpInput == null || !otpSession.equals(otpInput)) {
            response.getWriter().write("{\"success\":false, \"message\":\"M√£ OTP kh√¥ng ƒë√∫ng!\"}");
            return;
        }

        // ===== OTP EXPIRATION CHECK =====
        // Ki·ªÉm tra OTP c√≥ h·∫øt h·∫°n kh√¥ng (5 ph√∫t)
        if (otpTime == null || (System.currentTimeMillis() - otpTime > 5 * 60 * 1000)) {
            response.getWriter().write("{\"success\":false, \"message\":\"M√£ OTP ƒë√£ h·∫øt h·∫°n!\"}");
            return;
        }

        // ===== SESSION DATA RETRIEVAL =====
        // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng ƒë√£ l∆∞u t·∫°m trong session
        String fullName = (String) session.getAttribute("pending_fullName");
        String password = (String) session.getAttribute("pending_password");
        String gender = (String) session.getAttribute("pending_gender");
        String role = (String) session.getAttribute("pending_role");
        Boolean isTeacherPending = (Boolean) session.getAttribute("pending_isTeacherPending");
        String certificatePath = (String) session.getAttribute("pending_certificatePath");

        // ===== USER CREATION =====
        // T·∫°o t√†i kho·∫£n m·ªõi d·ª±a tr√™n role
        if (role != null && "teacher".equals(role)) {
            // ===== TEACHER ACCOUNT CREATION =====
            // T·∫°o t√†i kho·∫£n gi√°o vi√™n v·ªõi th√¥ng tin ch·ª©ng ch·ªâ
            new UserDAO().createNewUser(email, fullName, password, gender, role, isTeacherPending != null && isTeacherPending, certificatePath);
            System.out.println("‚úÖ [VerifyOtp] ƒê√£ t·∫°o t√†i kho·∫£n gi√°o vi√™n: " + email);
        } else {
            // ===== REGULAR ACCOUNT CREATION =====
            // T·∫°o t√†i kho·∫£n th∆∞·ªùng
            new UserDAO().createNewUser(email, fullName, password, gender, role, false, null);
            System.out.println("‚úÖ [VerifyOtp] ƒê√£ t·∫°o t√†i kho·∫£n th∆∞·ªùng: " + email);
        }

        User user = new UserDAO().getUserByEmail(email);
        session.setAttribute("authUser", user);

        // ===== SESSION CLEANUP =====
        // X√≥a d·ªØ li·ªáu t·∫°m trong session sau khi t·∫°o t√†i kho·∫£n th√†nh c√¥ng
        session.removeAttribute("otp_" + email);
        session.removeAttribute("otp_time_" + email);
        session.removeAttribute("pending_email");
        session.removeAttribute("pending_fullName");
        session.removeAttribute("pending_password");
        session.removeAttribute("pending_gender");
        session.removeAttribute("pending_role");
        session.removeAttribute("pending_isTeacherPending");
        session.removeAttribute("pending_certificatePath");
        System.out.println("üßπ [VerifyOtp] ƒê√£ x√≥a d·ªØ li·ªáu t·∫°m trong session cho: " + email);

        // ===== SUCCESS RESPONSE =====
        // Tr·∫£ v·ªÅ JSON th√†nh c√¥ng
        response.getWriter().write("{\"success\":true}");
    }
}
